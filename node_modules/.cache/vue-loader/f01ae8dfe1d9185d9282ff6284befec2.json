{"remainingRequest":"C:\\Users\\67564\\Desktop\\site\\HYMall\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\67564\\Desktop\\site\\HYMall\\src\\components\\common\\swiper\\Swiper.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\67564\\Desktop\\site\\HYMall\\src\\components\\common\\swiper\\Swiper.vue","mtime":1576306124378},{"path":"C:\\Users\\67564\\Desktop\\site\\HYMall\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576308382003},{"path":"C:\\Users\\67564\\Desktop\\site\\HYMall\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\67564\\Desktop\\site\\HYMall\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576308382003},{"path":"C:\\Users\\67564\\Desktop\\site\\HYMall\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\texport default {\n\t\tname: \"Swiper\",\n    props: {\n      interval: {\n\t\t    type: Number,\n        default: 3000\n      },\n      animDuration: {\n\t\t    type: Number,\n        default: 300\n      },\n      moveRatio: {\n        type: Number,\n        default: 0.25\n      },\n      showIndicator: {\n        type: Boolean,\n        default: true\n      }\n    },\n    data: function () {\n\t\t  return {\n        slideCount: 0, // 元素个数\n        totalWidth: 0, // swiper的宽度\n        swiperStyle: {}, // swiper样式\n        currentIndex: 1, // 当前的index\n        scrolling: false, // 是否正在滚动\n      }\n    },\n    mounted: function () {\n      // 1.操作DOM, 在前后添加Slide\n      setTimeout(() => {\n        this.handleDom();\n\n        // 2.开启定时器\n        this.startTimer();\n      }, 100)\n    },\n    methods: {\n\t\t  /**\n       * 定时器操作\n       */\n      startTimer: function () {\n\t\t    this.playTimer = window.setInterval(() => {\n\t\t      this.currentIndex++;\n\t\t      this.scrollContent(-this.currentIndex * this.totalWidth);\n        }, this.interval)\n      },\n      stopTimer: function () {\n        window.clearInterval(this.playTimer);\n      },\n\n      /**\n       * 滚动到正确的位置\n       */\n      scrollContent: function (currentPosition) {\n        // 0.设置正在滚动\n        this.scrolling = true;\n\n        // 1.开始滚动动画\n        this.swiperStyle.transition ='transform '+ this.animDuration + 'ms';\n        this.setTransform(currentPosition);\n\n        // 2.判断滚动到的位置\n        this.checkPosition();\n\n        // 4.滚动完成\n        this.scrolling = false\n      },\n\n      /**\n       * 校验正确的位置\n       */\n      checkPosition: function () {\n        window.setTimeout(() => {\n          // 1.校验正确的位置\n          this.swiperStyle.transition = '0ms';\n          if (this.currentIndex >= this.slideCount + 1) {\n            this.currentIndex = 1;\n            this.setTransform(-this.currentIndex * this.totalWidth);\n          } else if (this.currentIndex <= 0) {\n            this.currentIndex = this.slideCount;\n            this.setTransform(-this.currentIndex * this.totalWidth);\n          }\n\n          // 2.结束移动后的回调\n          this.$emit('transitionEnd', this.currentIndex-1);\n        }, this.animDuration)\n      },\n\n      /**\n       * 设置滚动的位置\n       */\n      setTransform: function (position) {\n        this.swiperStyle.transform = `translate3d(${position}px, 0, 0)`;\n        this.swiperStyle['-webkit-transform'] = `translate3d(${position}px), 0, 0`;\n        this.swiperStyle['-ms-transform'] = `translate3d(${position}px), 0, 0`;\n      },\n\n      /**\n       * 操作DOM, 在DOM前后添加Slide\n       */\n\t\t  handleDom: function () {\n        // 1.获取要操作的元素\n        let swiperEl = document.querySelector('.swiper');\n        let slidesEls = swiperEl.getElementsByClassName('slide');\n\n        // 2.保存个数\n        this.slideCount = slidesEls.length;\n\n        // 3.如果大于1个, 那么在前后分别添加一个slide\n        if (this.slideCount > 1) {\n          let cloneFirst = slidesEls[0].cloneNode(true);\n          let cloneLast = slidesEls[this.slideCount - 1].cloneNode(true);\n          swiperEl.insertBefore(cloneLast, slidesEls[0]);\n          swiperEl.appendChild(cloneFirst);\n          this.totalWidth = swiperEl.offsetWidth;\n          this.swiperStyle = swiperEl.style;\n        }\n\n        // 4.让swiper元素, 显示第一个(目前是显示前面添加的最后一个元素)\n        this.setTransform(-this.totalWidth);\n      },\n\n      /**\n       * 拖动事件的处理\n       */\n      touchStart: function (e) {\n        // 1.如果正在滚动, 不可以拖动\n        if (this.scrolling) return;\n\n        // 2.停止定时器\n        this.stopTimer();\n\n        // 3.保存开始滚动的位置\n        this.startX = e.touches[0].pageX;\n      },\n\n      touchMove: function (e) {\n        // 1.计算出用户拖动的距离\n        this.currentX = e.touches[0].pageX;\n        this.distance = this.currentX - this.startX;\n        let currentPosition = -this.currentIndex * this.totalWidth;\n        let moveDistance = this.distance + currentPosition;\n\n        // 2.设置当前的位置\n        this.setTransform(moveDistance);\n      },\n\n      touchEnd: function (e) {\n        // 1.获取移动的距离\n        let currentMove = Math.abs(this.distance);\n\n        // 2.判断最终的距离\n        if (this.distance === 0) {\n          return\n        } else if (this.distance > 0 && currentMove > this.totalWidth * this.moveRatio) { // 右边移动超过0.5\n          this.currentIndex--\n        } else if (this.distance < 0 && currentMove > this.totalWidth * this.moveRatio) { // 向左移动超过0.5\n          this.currentIndex++\n        }\n\n        // 3.移动到正确的位置\n        this.scrollContent(-this.currentIndex * this.totalWidth);\n\n        // 4.移动完成后重新开启定时器\n        this.startTimer();\n      },\n\n      /**\n       * 控制上一个, 下一个\n       */\n      previous: function () {\n        this.changeItem(-1);\n      },\n\n      next: function () {\n        this.changeItem(1);\n      },\n\n      changeItem: function (num) {\n        // 1.移除定时器\n        this.stopTimer();\n\n        // 2.修改index和位置\n        this.currentIndex += num;\n        this.scrollContent(-this.currentIndex * this.totalWidth);\n\n        // 3.添加定时器\n        this.startTimer();\n      }\n    }\n\t}\n",{"version":3,"sources":["Swiper.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"Swiper.vue","sourceRoot":"src\\components\\common\\swiper","sourcesContent":["<template>\r\n    <div id=\"hy-swiper\">\r\n      <div class=\"swiper\" @touchstart=\"touchStart\" @touchmove=\"touchMove\" @touchend=\"touchEnd\">\r\n        <slot></slot>\r\n      </div>\r\n      <slot name=\"indicator\">\r\n      </slot>\r\n      <div class=\"indicator\">\r\n        <slot name=\"indicator\" v-if=\"showIndicator && slideCount>1\">\r\n          <div v-for=\"(item, index) in slideCount\" class=\"indi-item\" :class=\"{active: index === currentIndex-1}\" :key=\"index\"></div>\r\n        </slot>\r\n      </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\texport default {\r\n\t\tname: \"Swiper\",\r\n    props: {\r\n      interval: {\r\n\t\t    type: Number,\r\n        default: 3000\r\n      },\r\n      animDuration: {\r\n\t\t    type: Number,\r\n        default: 300\r\n      },\r\n      moveRatio: {\r\n        type: Number,\r\n        default: 0.25\r\n      },\r\n      showIndicator: {\r\n        type: Boolean,\r\n        default: true\r\n      }\r\n    },\r\n    data: function () {\r\n\t\t  return {\r\n        slideCount: 0, // 元素个数\r\n        totalWidth: 0, // swiper的宽度\r\n        swiperStyle: {}, // swiper样式\r\n        currentIndex: 1, // 当前的index\r\n        scrolling: false, // 是否正在滚动\r\n      }\r\n    },\r\n    mounted: function () {\r\n      // 1.操作DOM, 在前后添加Slide\r\n      setTimeout(() => {\r\n        this.handleDom();\r\n\r\n        // 2.开启定时器\r\n        this.startTimer();\r\n      }, 100)\r\n    },\r\n    methods: {\r\n\t\t  /**\r\n       * 定时器操作\r\n       */\r\n      startTimer: function () {\r\n\t\t    this.playTimer = window.setInterval(() => {\r\n\t\t      this.currentIndex++;\r\n\t\t      this.scrollContent(-this.currentIndex * this.totalWidth);\r\n        }, this.interval)\r\n      },\r\n      stopTimer: function () {\r\n        window.clearInterval(this.playTimer);\r\n      },\r\n\r\n      /**\r\n       * 滚动到正确的位置\r\n       */\r\n      scrollContent: function (currentPosition) {\r\n        // 0.设置正在滚动\r\n        this.scrolling = true;\r\n\r\n        // 1.开始滚动动画\r\n        this.swiperStyle.transition ='transform '+ this.animDuration + 'ms';\r\n        this.setTransform(currentPosition);\r\n\r\n        // 2.判断滚动到的位置\r\n        this.checkPosition();\r\n\r\n        // 4.滚动完成\r\n        this.scrolling = false\r\n      },\r\n\r\n      /**\r\n       * 校验正确的位置\r\n       */\r\n      checkPosition: function () {\r\n        window.setTimeout(() => {\r\n          // 1.校验正确的位置\r\n          this.swiperStyle.transition = '0ms';\r\n          if (this.currentIndex >= this.slideCount + 1) {\r\n            this.currentIndex = 1;\r\n            this.setTransform(-this.currentIndex * this.totalWidth);\r\n          } else if (this.currentIndex <= 0) {\r\n            this.currentIndex = this.slideCount;\r\n            this.setTransform(-this.currentIndex * this.totalWidth);\r\n          }\r\n\r\n          // 2.结束移动后的回调\r\n          this.$emit('transitionEnd', this.currentIndex-1);\r\n        }, this.animDuration)\r\n      },\r\n\r\n      /**\r\n       * 设置滚动的位置\r\n       */\r\n      setTransform: function (position) {\r\n        this.swiperStyle.transform = `translate3d(${position}px, 0, 0)`;\r\n        this.swiperStyle['-webkit-transform'] = `translate3d(${position}px), 0, 0`;\r\n        this.swiperStyle['-ms-transform'] = `translate3d(${position}px), 0, 0`;\r\n      },\r\n\r\n      /**\r\n       * 操作DOM, 在DOM前后添加Slide\r\n       */\r\n\t\t  handleDom: function () {\r\n        // 1.获取要操作的元素\r\n        let swiperEl = document.querySelector('.swiper');\r\n        let slidesEls = swiperEl.getElementsByClassName('slide');\r\n\r\n        // 2.保存个数\r\n        this.slideCount = slidesEls.length;\r\n\r\n        // 3.如果大于1个, 那么在前后分别添加一个slide\r\n        if (this.slideCount > 1) {\r\n          let cloneFirst = slidesEls[0].cloneNode(true);\r\n          let cloneLast = slidesEls[this.slideCount - 1].cloneNode(true);\r\n          swiperEl.insertBefore(cloneLast, slidesEls[0]);\r\n          swiperEl.appendChild(cloneFirst);\r\n          this.totalWidth = swiperEl.offsetWidth;\r\n          this.swiperStyle = swiperEl.style;\r\n        }\r\n\r\n        // 4.让swiper元素, 显示第一个(目前是显示前面添加的最后一个元素)\r\n        this.setTransform(-this.totalWidth);\r\n      },\r\n\r\n      /**\r\n       * 拖动事件的处理\r\n       */\r\n      touchStart: function (e) {\r\n        // 1.如果正在滚动, 不可以拖动\r\n        if (this.scrolling) return;\r\n\r\n        // 2.停止定时器\r\n        this.stopTimer();\r\n\r\n        // 3.保存开始滚动的位置\r\n        this.startX = e.touches[0].pageX;\r\n      },\r\n\r\n      touchMove: function (e) {\r\n        // 1.计算出用户拖动的距离\r\n        this.currentX = e.touches[0].pageX;\r\n        this.distance = this.currentX - this.startX;\r\n        let currentPosition = -this.currentIndex * this.totalWidth;\r\n        let moveDistance = this.distance + currentPosition;\r\n\r\n        // 2.设置当前的位置\r\n        this.setTransform(moveDistance);\r\n      },\r\n\r\n      touchEnd: function (e) {\r\n        // 1.获取移动的距离\r\n        let currentMove = Math.abs(this.distance);\r\n\r\n        // 2.判断最终的距离\r\n        if (this.distance === 0) {\r\n          return\r\n        } else if (this.distance > 0 && currentMove > this.totalWidth * this.moveRatio) { // 右边移动超过0.5\r\n          this.currentIndex--\r\n        } else if (this.distance < 0 && currentMove > this.totalWidth * this.moveRatio) { // 向左移动超过0.5\r\n          this.currentIndex++\r\n        }\r\n\r\n        // 3.移动到正确的位置\r\n        this.scrollContent(-this.currentIndex * this.totalWidth);\r\n\r\n        // 4.移动完成后重新开启定时器\r\n        this.startTimer();\r\n      },\r\n\r\n      /**\r\n       * 控制上一个, 下一个\r\n       */\r\n      previous: function () {\r\n        this.changeItem(-1);\r\n      },\r\n\r\n      next: function () {\r\n        this.changeItem(1);\r\n      },\r\n\r\n      changeItem: function (num) {\r\n        // 1.移除定时器\r\n        this.stopTimer();\r\n\r\n        // 2.修改index和位置\r\n        this.currentIndex += num;\r\n        this.scrollContent(-this.currentIndex * this.totalWidth);\r\n\r\n        // 3.添加定时器\r\n        this.startTimer();\r\n      }\r\n    }\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n  #hy-swiper {\r\n    overflow: hidden;\r\n    position: relative;\r\n  }\r\n\r\n  .swiper {\r\n    display: flex;\r\n  }\r\n\r\n  .indicator {\r\n    display: flex;\r\n    justify-content: center;\r\n    position: absolute;\r\n    width: 100%;\r\n    bottom: 8px;\r\n  }\r\n\r\n  .indi-item {\r\n    box-sizing: border-box;\r\n    width: 8px;\r\n    height: 8px;\r\n    border-radius: 4px;\r\n    background-color: #fff;\r\n    line-height: 8px;\r\n    text-align: center;\r\n    font-size: 12px;\r\n    margin: 0 5px;\r\n  }\r\n\r\n  .indi-item.active {\r\n    background-color: rgba(212,62,46,1.0);\r\n  }\r\n</style>\r\n"]}]}