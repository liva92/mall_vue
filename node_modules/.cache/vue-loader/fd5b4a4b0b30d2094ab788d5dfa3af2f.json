{"remainingRequest":"C:\\Users\\67564\\Desktop\\面试\\mall\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\67564\\Desktop\\面试\\mall\\src\\components\\common\\gridView\\GridView.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\67564\\Desktop\\面试\\mall\\src\\components\\common\\gridView\\GridView.vue","mtime":1576306124376},{"path":"C:\\Users\\67564\\Desktop\\面试\\mall\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576308382003},{"path":"C:\\Users\\67564\\Desktop\\面试\\mall\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\67564\\Desktop\\面试\\mall\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576308382003},{"path":"C:\\Users\\67564\\Desktop\\面试\\mall\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n\n\texport default {\n\t\tname: \"GridView\",\n    props: {\n\t\t  cols: {\n\t\t    type: Number,\n        default: 2\n      },\n      hMargin: {\n\t\t    type: Number,\n        default: 8\n      },\n      vMargin: {\n\t\t    type: Number,\n        default: 8\n      },\n      itemSpace: {\n\t\t    type: Number,\n        default: 8\n      },\n      lineSpace: {\n\t\t    type: Number,\n        default: 8\n      }\n    },\n    mounted: function () {\n\t\t  setTimeout(this._autoLayout, 20)\n    },\n    updated: function () {\n      this._autoLayout()\n    },\n    methods: {\n\t\t  _autoLayout: function () {\n        // 1.获取gridEl和children\n        // 注: 这里为什么不用document.querySelector呢?\n        // 答: 因为如果在项目中, 多处都用到了grid-view, 那么这里就不确定获取的是哪一个了.\n        let gridEl = this.$refs.gridView;\n        let children = gridEl.children;\n\n        // 2.设置gridEl的内边距\n        gridEl.style.padding = `${this.vMargin}px ${this.hMargin}px`\n\n        // 3.计算item的宽度\n        let itemWidth = (gridEl.clientWidth - 2 * this.hMargin - (this.cols - 1) * this.itemSpace) / this.cols;\n        for (let i = 0; i < children.length; i++) {\n          let item = children[i];\n          item.style.width = itemWidth + 'px';\n          if ((i+1) % this.cols !== 0) {\n            item.style.marginRight = this.itemSpace + 'px'\n          }\n          if (i >= this.cols) {\n            item.style.marginTop = this.lineSpace + 'px'\n          }\n        }\n      }\n    }\n\t}\n",{"version":3,"sources":["GridView.vue"],"names":[],"mappings":";;;;;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"GridView.vue","sourceRoot":"src\\components\\common\\gridView","sourcesContent":["<template>\r\n  <div class=\"grid-view\" ref=\"gridView\">\r\n    <slot></slot>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n\texport default {\r\n\t\tname: \"GridView\",\r\n    props: {\r\n\t\t  cols: {\r\n\t\t    type: Number,\r\n        default: 2\r\n      },\r\n      hMargin: {\r\n\t\t    type: Number,\r\n        default: 8\r\n      },\r\n      vMargin: {\r\n\t\t    type: Number,\r\n        default: 8\r\n      },\r\n      itemSpace: {\r\n\t\t    type: Number,\r\n        default: 8\r\n      },\r\n      lineSpace: {\r\n\t\t    type: Number,\r\n        default: 8\r\n      }\r\n    },\r\n    mounted: function () {\r\n\t\t  setTimeout(this._autoLayout, 20)\r\n    },\r\n    updated: function () {\r\n      this._autoLayout()\r\n    },\r\n    methods: {\r\n\t\t  _autoLayout: function () {\r\n        // 1.获取gridEl和children\r\n        // 注: 这里为什么不用document.querySelector呢?\r\n        // 答: 因为如果在项目中, 多处都用到了grid-view, 那么这里就不确定获取的是哪一个了.\r\n        let gridEl = this.$refs.gridView;\r\n        let children = gridEl.children;\r\n\r\n        // 2.设置gridEl的内边距\r\n        gridEl.style.padding = `${this.vMargin}px ${this.hMargin}px`\r\n\r\n        // 3.计算item的宽度\r\n        let itemWidth = (gridEl.clientWidth - 2 * this.hMargin - (this.cols - 1) * this.itemSpace) / this.cols;\r\n        for (let i = 0; i < children.length; i++) {\r\n          let item = children[i];\r\n          item.style.width = itemWidth + 'px';\r\n          if ((i+1) % this.cols !== 0) {\r\n            item.style.marginRight = this.itemSpace + 'px'\r\n          }\r\n          if (i >= this.cols) {\r\n            item.style.marginTop = this.lineSpace + 'px'\r\n          }\r\n        }\r\n      }\r\n    }\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n  .grid-view {\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n  }\r\n</style>\r\n"]}]}