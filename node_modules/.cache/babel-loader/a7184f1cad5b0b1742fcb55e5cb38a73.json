{"remainingRequest":"C:\\Users\\67564\\Desktop\\面试\\mall\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\67564\\Desktop\\面试\\mall\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\67564\\Desktop\\面试\\mall\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\67564\\Desktop\\面试\\mall\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\67564\\Desktop\\面试\\mall\\src\\components\\common\\swiper\\Swiper.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\67564\\Desktop\\面试\\mall\\src\\components\\common\\swiper\\Swiper.vue","mtime":1576306124378},{"path":"C:\\Users\\67564\\Desktop\\面试\\mall\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576308382003},{"path":"C:\\Users\\67564\\Desktop\\面试\\mall\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\67564\\Desktop\\面试\\mall\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\67564\\Desktop\\面试\\mall\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576308382003},{"path":"C:\\Users\\67564\\Desktop\\面试\\mall\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.number.constructor\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"Swiper\",\n  props: {\n    interval: {\n      type: Number,\n      default: 3000\n    },\n    animDuration: {\n      type: Number,\n      default: 300\n    },\n    moveRatio: {\n      type: Number,\n      default: 0.25\n    },\n    showIndicator: {\n      type: Boolean,\n      default: true\n    }\n  },\n  data: function data() {\n    return {\n      slideCount: 0,\n      // 元素个数\n      totalWidth: 0,\n      // swiper的宽度\n      swiperStyle: {},\n      // swiper样式\n      currentIndex: 1,\n      // 当前的index\n      scrolling: false // 是否正在滚动\n\n    };\n  },\n  mounted: function mounted() {\n    var _this = this;\n\n    // 1.操作DOM, 在前后添加Slide\n    setTimeout(function () {\n      _this.handleDom(); // 2.开启定时器\n\n\n      _this.startTimer();\n    }, 100);\n  },\n  methods: {\n    /**\n       * 定时器操作\n       */\n    startTimer: function startTimer() {\n      var _this2 = this;\n\n      this.playTimer = window.setInterval(function () {\n        _this2.currentIndex++;\n\n        _this2.scrollContent(-_this2.currentIndex * _this2.totalWidth);\n      }, this.interval);\n    },\n    stopTimer: function stopTimer() {\n      window.clearInterval(this.playTimer);\n    },\n\n    /**\n     * 滚动到正确的位置\n     */\n    scrollContent: function scrollContent(currentPosition) {\n      // 0.设置正在滚动\n      this.scrolling = true; // 1.开始滚动动画\n\n      this.swiperStyle.transition = 'transform ' + this.animDuration + 'ms';\n      this.setTransform(currentPosition); // 2.判断滚动到的位置\n\n      this.checkPosition(); // 4.滚动完成\n\n      this.scrolling = false;\n    },\n\n    /**\n     * 校验正确的位置\n     */\n    checkPosition: function checkPosition() {\n      var _this3 = this;\n\n      window.setTimeout(function () {\n        // 1.校验正确的位置\n        _this3.swiperStyle.transition = '0ms';\n\n        if (_this3.currentIndex >= _this3.slideCount + 1) {\n          _this3.currentIndex = 1;\n\n          _this3.setTransform(-_this3.currentIndex * _this3.totalWidth);\n        } else if (_this3.currentIndex <= 0) {\n          _this3.currentIndex = _this3.slideCount;\n\n          _this3.setTransform(-_this3.currentIndex * _this3.totalWidth);\n        } // 2.结束移动后的回调\n\n\n        _this3.$emit('transitionEnd', _this3.currentIndex - 1);\n      }, this.animDuration);\n    },\n\n    /**\n     * 设置滚动的位置\n     */\n    setTransform: function setTransform(position) {\n      this.swiperStyle.transform = \"translate3d(\".concat(position, \"px, 0, 0)\");\n      this.swiperStyle['-webkit-transform'] = \"translate3d(\".concat(position, \"px), 0, 0\");\n      this.swiperStyle['-ms-transform'] = \"translate3d(\".concat(position, \"px), 0, 0\");\n    },\n\n    /**\n     * 操作DOM, 在DOM前后添加Slide\n     */\n    handleDom: function handleDom() {\n      // 1.获取要操作的元素\n      var swiperEl = document.querySelector('.swiper');\n      var slidesEls = swiperEl.getElementsByClassName('slide'); // 2.保存个数\n\n      this.slideCount = slidesEls.length; // 3.如果大于1个, 那么在前后分别添加一个slide\n\n      if (this.slideCount > 1) {\n        var cloneFirst = slidesEls[0].cloneNode(true);\n        var cloneLast = slidesEls[this.slideCount - 1].cloneNode(true);\n        swiperEl.insertBefore(cloneLast, slidesEls[0]);\n        swiperEl.appendChild(cloneFirst);\n        this.totalWidth = swiperEl.offsetWidth;\n        this.swiperStyle = swiperEl.style;\n      } // 4.让swiper元素, 显示第一个(目前是显示前面添加的最后一个元素)\n\n\n      this.setTransform(-this.totalWidth);\n    },\n\n    /**\n     * 拖动事件的处理\n     */\n    touchStart: function touchStart(e) {\n      // 1.如果正在滚动, 不可以拖动\n      if (this.scrolling) return; // 2.停止定时器\n\n      this.stopTimer(); // 3.保存开始滚动的位置\n\n      this.startX = e.touches[0].pageX;\n    },\n    touchMove: function touchMove(e) {\n      // 1.计算出用户拖动的距离\n      this.currentX = e.touches[0].pageX;\n      this.distance = this.currentX - this.startX;\n      var currentPosition = -this.currentIndex * this.totalWidth;\n      var moveDistance = this.distance + currentPosition; // 2.设置当前的位置\n\n      this.setTransform(moveDistance);\n    },\n    touchEnd: function touchEnd(e) {\n      // 1.获取移动的距离\n      var currentMove = Math.abs(this.distance); // 2.判断最终的距离\n\n      if (this.distance === 0) {\n        return;\n      } else if (this.distance > 0 && currentMove > this.totalWidth * this.moveRatio) {\n        // 右边移动超过0.5\n        this.currentIndex--;\n      } else if (this.distance < 0 && currentMove > this.totalWidth * this.moveRatio) {\n        // 向左移动超过0.5\n        this.currentIndex++;\n      } // 3.移动到正确的位置\n\n\n      this.scrollContent(-this.currentIndex * this.totalWidth); // 4.移动完成后重新开启定时器\n\n      this.startTimer();\n    },\n\n    /**\n     * 控制上一个, 下一个\n     */\n    previous: function previous() {\n      this.changeItem(-1);\n    },\n    next: function next() {\n      this.changeItem(1);\n    },\n    changeItem: function changeItem(num) {\n      // 1.移除定时器\n      this.stopTimer(); // 2.修改index和位置\n\n      this.currentIndex += num;\n      this.scrollContent(-this.currentIndex * this.totalWidth); // 3.添加定时器\n\n      this.startTimer();\n    }\n  }\n};",{"version":3,"sources":["Swiper.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n    <div id=\"hy-swiper\">\r\n      <div class=\"swiper\" @touchstart=\"touchStart\" @touchmove=\"touchMove\" @touchend=\"touchEnd\">\r\n        <slot></slot>\r\n      </div>\r\n      <slot name=\"indicator\">\r\n      </slot>\r\n      <div class=\"indicator\">\r\n        <slot name=\"indicator\" v-if=\"showIndicator && slideCount>1\">\r\n          <div v-for=\"(item, index) in slideCount\" class=\"indi-item\" :class=\"{active: index === currentIndex-1}\" :key=\"index\"></div>\r\n        </slot>\r\n      </div>\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n\texport default {\r\n\t\tname: \"Swiper\",\r\n    props: {\r\n      interval: {\r\n\t\t    type: Number,\r\n        default: 3000\r\n      },\r\n      animDuration: {\r\n\t\t    type: Number,\r\n        default: 300\r\n      },\r\n      moveRatio: {\r\n        type: Number,\r\n        default: 0.25\r\n      },\r\n      showIndicator: {\r\n        type: Boolean,\r\n        default: true\r\n      }\r\n    },\r\n    data: function () {\r\n\t\t  return {\r\n        slideCount: 0, // 元素个数\r\n        totalWidth: 0, // swiper的宽度\r\n        swiperStyle: {}, // swiper样式\r\n        currentIndex: 1, // 当前的index\r\n        scrolling: false, // 是否正在滚动\r\n      }\r\n    },\r\n    mounted: function () {\r\n      // 1.操作DOM, 在前后添加Slide\r\n      setTimeout(() => {\r\n        this.handleDom();\r\n\r\n        // 2.开启定时器\r\n        this.startTimer();\r\n      }, 100)\r\n    },\r\n    methods: {\r\n\t\t  /**\r\n       * 定时器操作\r\n       */\r\n      startTimer: function () {\r\n\t\t    this.playTimer = window.setInterval(() => {\r\n\t\t      this.currentIndex++;\r\n\t\t      this.scrollContent(-this.currentIndex * this.totalWidth);\r\n        }, this.interval)\r\n      },\r\n      stopTimer: function () {\r\n        window.clearInterval(this.playTimer);\r\n      },\r\n\r\n      /**\r\n       * 滚动到正确的位置\r\n       */\r\n      scrollContent: function (currentPosition) {\r\n        // 0.设置正在滚动\r\n        this.scrolling = true;\r\n\r\n        // 1.开始滚动动画\r\n        this.swiperStyle.transition ='transform '+ this.animDuration + 'ms';\r\n        this.setTransform(currentPosition);\r\n\r\n        // 2.判断滚动到的位置\r\n        this.checkPosition();\r\n\r\n        // 4.滚动完成\r\n        this.scrolling = false\r\n      },\r\n\r\n      /**\r\n       * 校验正确的位置\r\n       */\r\n      checkPosition: function () {\r\n        window.setTimeout(() => {\r\n          // 1.校验正确的位置\r\n          this.swiperStyle.transition = '0ms';\r\n          if (this.currentIndex >= this.slideCount + 1) {\r\n            this.currentIndex = 1;\r\n            this.setTransform(-this.currentIndex * this.totalWidth);\r\n          } else if (this.currentIndex <= 0) {\r\n            this.currentIndex = this.slideCount;\r\n            this.setTransform(-this.currentIndex * this.totalWidth);\r\n          }\r\n\r\n          // 2.结束移动后的回调\r\n          this.$emit('transitionEnd', this.currentIndex-1);\r\n        }, this.animDuration)\r\n      },\r\n\r\n      /**\r\n       * 设置滚动的位置\r\n       */\r\n      setTransform: function (position) {\r\n        this.swiperStyle.transform = `translate3d(${position}px, 0, 0)`;\r\n        this.swiperStyle['-webkit-transform'] = `translate3d(${position}px), 0, 0`;\r\n        this.swiperStyle['-ms-transform'] = `translate3d(${position}px), 0, 0`;\r\n      },\r\n\r\n      /**\r\n       * 操作DOM, 在DOM前后添加Slide\r\n       */\r\n\t\t  handleDom: function () {\r\n        // 1.获取要操作的元素\r\n        let swiperEl = document.querySelector('.swiper');\r\n        let slidesEls = swiperEl.getElementsByClassName('slide');\r\n\r\n        // 2.保存个数\r\n        this.slideCount = slidesEls.length;\r\n\r\n        // 3.如果大于1个, 那么在前后分别添加一个slide\r\n        if (this.slideCount > 1) {\r\n          let cloneFirst = slidesEls[0].cloneNode(true);\r\n          let cloneLast = slidesEls[this.slideCount - 1].cloneNode(true);\r\n          swiperEl.insertBefore(cloneLast, slidesEls[0]);\r\n          swiperEl.appendChild(cloneFirst);\r\n          this.totalWidth = swiperEl.offsetWidth;\r\n          this.swiperStyle = swiperEl.style;\r\n        }\r\n\r\n        // 4.让swiper元素, 显示第一个(目前是显示前面添加的最后一个元素)\r\n        this.setTransform(-this.totalWidth);\r\n      },\r\n\r\n      /**\r\n       * 拖动事件的处理\r\n       */\r\n      touchStart: function (e) {\r\n        // 1.如果正在滚动, 不可以拖动\r\n        if (this.scrolling) return;\r\n\r\n        // 2.停止定时器\r\n        this.stopTimer();\r\n\r\n        // 3.保存开始滚动的位置\r\n        this.startX = e.touches[0].pageX;\r\n      },\r\n\r\n      touchMove: function (e) {\r\n        // 1.计算出用户拖动的距离\r\n        this.currentX = e.touches[0].pageX;\r\n        this.distance = this.currentX - this.startX;\r\n        let currentPosition = -this.currentIndex * this.totalWidth;\r\n        let moveDistance = this.distance + currentPosition;\r\n\r\n        // 2.设置当前的位置\r\n        this.setTransform(moveDistance);\r\n      },\r\n\r\n      touchEnd: function (e) {\r\n        // 1.获取移动的距离\r\n        let currentMove = Math.abs(this.distance);\r\n\r\n        // 2.判断最终的距离\r\n        if (this.distance === 0) {\r\n          return\r\n        } else if (this.distance > 0 && currentMove > this.totalWidth * this.moveRatio) { // 右边移动超过0.5\r\n          this.currentIndex--\r\n        } else if (this.distance < 0 && currentMove > this.totalWidth * this.moveRatio) { // 向左移动超过0.5\r\n          this.currentIndex++\r\n        }\r\n\r\n        // 3.移动到正确的位置\r\n        this.scrollContent(-this.currentIndex * this.totalWidth);\r\n\r\n        // 4.移动完成后重新开启定时器\r\n        this.startTimer();\r\n      },\r\n\r\n      /**\r\n       * 控制上一个, 下一个\r\n       */\r\n      previous: function () {\r\n        this.changeItem(-1);\r\n      },\r\n\r\n      next: function () {\r\n        this.changeItem(1);\r\n      },\r\n\r\n      changeItem: function (num) {\r\n        // 1.移除定时器\r\n        this.stopTimer();\r\n\r\n        // 2.修改index和位置\r\n        this.currentIndex += num;\r\n        this.scrollContent(-this.currentIndex * this.totalWidth);\r\n\r\n        // 3.添加定时器\r\n        this.startTimer();\r\n      }\r\n    }\r\n\t}\r\n</script>\r\n\r\n<style scoped>\r\n  #hy-swiper {\r\n    overflow: hidden;\r\n    position: relative;\r\n  }\r\n\r\n  .swiper {\r\n    display: flex;\r\n  }\r\n\r\n  .indicator {\r\n    display: flex;\r\n    justify-content: center;\r\n    position: absolute;\r\n    width: 100%;\r\n    bottom: 8px;\r\n  }\r\n\r\n  .indi-item {\r\n    box-sizing: border-box;\r\n    width: 8px;\r\n    height: 8px;\r\n    border-radius: 4px;\r\n    background-color: #fff;\r\n    line-height: 8px;\r\n    text-align: center;\r\n    font-size: 12px;\r\n    margin: 0 5px;\r\n  }\r\n\r\n  .indi-item.active {\r\n    background-color: rgba(212,62,46,1.0);\r\n  }\r\n</style>\r\n"],"sourceRoot":"src\\components\\common\\swiper"}]}