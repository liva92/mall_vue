{"remainingRequest":"C:\\Users\\67564\\Desktop\\面试\\mall\\node_modules\\thread-loader\\dist\\cjs.js!C:\\Users\\67564\\Desktop\\面试\\mall\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\67564\\Desktop\\面试\\mall\\src\\network\\axios.js","dependencies":[{"path":"C:\\Users\\67564\\Desktop\\面试\\mall\\src\\network\\axios.js","mtime":1577349734702},{"path":"C:\\Users\\67564\\Desktop\\面试\\mall\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1576308382003},{"path":"C:\\Users\\67564\\Desktop\\面试\\mall\\node_modules\\thread-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\67564\\Desktop\\面试\\mall\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\nimport \"core-js/modules/es7.promise.finally\";\n\n/*\r\n * @Author: liva\r\n * @Date: 2019-12-14 14:48:44\r\n * @LastEditors  : liva\r\n * @LastEditTime : 2019-12-26 16:42:14\r\n */\nimport originAxios from \"axios\";\nimport qs from \"qs\";\nexport default function axios(option) {\n  return new Promise(function (resolve, reject) {\n    // 1.创建axios的实例\n    var instance = originAxios.create({\n      // baseURL: \"http://106.54.54.237:8000/api/w1\",\n      baseURL: \"http://123.207.32.32:8000/api/w1\" //timeout: 5000\n\n    }); // 配置请求和响应拦截\n\n    instance.interceptors.request.use(function (config) {\n      // console.log('来到了request拦截success中');\n      // 1.当发送网络请求时, 在页面中添加一个loading组件, 作为动画\n      // 2.某些请求要求用户必须登录, 判断用户是否有token, 如果没有token跳转到login页面\n      // 3.对请求的参数进行序列化(看服务器是否需要序列化)\n      // config.data = qs.stringify(config.data)\n      // console.log(config);\n      // 4.等等\n      return config;\n    }, function (err) {\n      // console.log('来到了request拦截failure中');\n      return err;\n    });\n    instance.interceptors.response.use(function (response) {\n      // console.log('来到了response拦截success中');\n      return response.data;\n    }, function (err) {\n      console.log(\"来到了response拦截failure中\");\n      console.log(err);\n\n      if (err && err.response) {\n        switch (err.response.status) {\n          case 400:\n            err.message = \"请求错误\";\n            break;\n\n          case 401:\n            err.message = \"未授权的访问\";\n            break;\n        }\n      }\n\n      return err;\n    }); // 2.传入对象进行网络请求\n\n    instance(option).then(function (res) {\n      resolve(res);\n    }).catch(function (err) {\n      reject(err);\n    });\n  });\n}",{"version":3,"sources":["C:\\Users\\67564\\Desktop\\面试\\mall\\src\\network\\axios.js"],"names":["originAxios","qs","axios","option","Promise","resolve","reject","instance","create","baseURL","interceptors","request","use","config","err","response","data","console","log","status","message","then","res","catch"],"mappings":";;;;AAAA;;;;;;AAMA,OAAOA,WAAP,MAAwB,OAAxB;AACA,OAAOC,EAAP,MAAe,IAAf;AAEA,eAAe,SAASC,KAAT,CAAeC,MAAf,EAAuB;AACpC,SAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC;AACA,QAAMC,WAAWP,YAAYQ,MAAZ,CAAmB;AAClC;AACAC,eAAS,kCAFyB,CAIlC;;AAJkC,KAAnB,CAAjB,CAFsC,CAStC;;AACAF,aAASG,YAAT,CAAsBC,OAAtB,CAA8BC,GAA9B,CACE,kBAAU;AACR;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA,aAAOC,MAAP;AACD,KAbH,EAcE,eAAO;AACL;AACA,aAAOC,GAAP;AACD,KAjBH;AAoBAP,aAASG,YAAT,CAAsBK,QAAtB,CAA+BH,GAA/B,CACE,oBAAY;AACV;AACA,aAAOG,SAASC,IAAhB;AACD,KAJH,EAKE,eAAO;AACLC,cAAQC,GAAR,CAAY,uBAAZ;AACAD,cAAQC,GAAR,CAAYJ,GAAZ;;AACA,UAAIA,OAAOA,IAAIC,QAAf,EAAyB;AACvB,gBAAQD,IAAIC,QAAJ,CAAaI,MAArB;AACE,eAAK,GAAL;AACEL,gBAAIM,OAAJ,GAAc,MAAd;AACA;;AACF,eAAK,GAAL;AACEN,gBAAIM,OAAJ,GAAc,QAAd;AACA;AANJ;AAQD;;AACD,aAAON,GAAP;AACD,KAnBH,EA9BsC,CAoDtC;;AACAP,aAASJ,MAAT,EACGkB,IADH,CACQ,eAAO;AACXhB,cAAQiB,GAAR;AACD,KAHH,EAIGC,KAJH,CAIS,eAAO;AACZjB,aAAOQ,GAAP;AACD,KANH;AAOD,GA5DM,CAAP;AA6DD","sourcesContent":["/*\r\n * @Author: liva\r\n * @Date: 2019-12-14 14:48:44\r\n * @LastEditors  : liva\r\n * @LastEditTime : 2019-12-26 16:42:14\r\n */\r\nimport originAxios from \"axios\";\r\nimport qs from \"qs\";\r\n\r\nexport default function axios(option) {\r\n  return new Promise((resolve, reject) => {\r\n    // 1.创建axios的实例\r\n    const instance = originAxios.create({\r\n      // baseURL: \"http://106.54.54.237:8000/api/w1\",\r\n      baseURL: \"http://123.207.32.32:8000/api/w1\"\r\n\r\n      //timeout: 5000\r\n    });\r\n\r\n    // 配置请求和响应拦截\r\n    instance.interceptors.request.use(\r\n      config => {\r\n        // console.log('来到了request拦截success中');\r\n        // 1.当发送网络请求时, 在页面中添加一个loading组件, 作为动画\r\n\r\n        // 2.某些请求要求用户必须登录, 判断用户是否有token, 如果没有token跳转到login页面\r\n\r\n        // 3.对请求的参数进行序列化(看服务器是否需要序列化)\r\n        // config.data = qs.stringify(config.data)\r\n        // console.log(config);\r\n\r\n        // 4.等等\r\n        return config;\r\n      },\r\n      err => {\r\n        // console.log('来到了request拦截failure中');\r\n        return err;\r\n      }\r\n    );\r\n\r\n    instance.interceptors.response.use(\r\n      response => {\r\n        // console.log('来到了response拦截success中');\r\n        return response.data;\r\n      },\r\n      err => {\r\n        console.log(\"来到了response拦截failure中\");\r\n        console.log(err);\r\n        if (err && err.response) {\r\n          switch (err.response.status) {\r\n            case 400:\r\n              err.message = \"请求错误\";\r\n              break;\r\n            case 401:\r\n              err.message = \"未授权的访问\";\r\n              break;\r\n          }\r\n        }\r\n        return err;\r\n      }\r\n    );\r\n\r\n    // 2.传入对象进行网络请求\r\n    instance(option)\r\n      .then(res => {\r\n        resolve(res);\r\n      })\r\n      .catch(err => {\r\n        reject(err);\r\n      });\r\n  });\r\n}\r\n"]}]}